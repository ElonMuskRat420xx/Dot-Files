!function(){"use strict";class e{static IsValidDataField(e){return null!=e&&e.length>0&&"null"!==e}static isElementDisabled(e){return e.disabled}static RunQuerySelectorAll(e){const t=e.split("<");let a=document.querySelectorAll(t[0]);for(const e of t.slice(1)){const t=a[0]?.shadowRoot;if(!t)return[];a=t.querySelectorAll(e)}return a}static IsElementVisible(e){return e&&e.offsetWidth>0&&e.offsetHeight>0}static CountVisibleElements(t){if(!e.IsValidDataField(t))return 0;const a=e.RunQuerySelectorAll(t);let i=0;for(const t of a)e.IsElementVisible(t)&&i++;return i}static GetFirstVisibleElement(t){if(!e.IsValidDataField(t))return;const a=t.split(";");for(const t of a)try{const a=e.RunQuerySelectorAll(t);for(const t of a)if(e.IsElementVisible(t))return t}catch(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: GetFirstVisibleElement error",e)}}static Sleep(e){return new Promise((t=>setTimeout(t,e)))}static async WaitForCondition(t,a,i){const l=(new Date).getTime();for(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: waiting");!await t()&&l+a>(new Date).getTime();)await e.Sleep(i??100);return window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: wait completed."),await t()}static async IsFieldVisible(t){return e.CountVisibleElements(t)>0}}class t{static Click(t,a){const i=a??e.GetFirstVisibleElement(t);return!!i&&(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: click element visible"),e.isElementDisabled(i)||(l=i,["mousedown","click","mouseup"].forEach((e=>l.dispatchEvent(new MouseEvent(e,{bubbles:!0,buttons:1,cancelable:!0,view:window}))))),!0);var l}static SetBoxValue(t,a){const i=document.createEvent("Events");i.initEvent("change",!0,!1);const l=document.createEvent("Events");l.initEvent("input",!0,!1);const o=new KeyboardEvent("keyup",{bubbles:!0,cancelable:!0,view:window}),n=e.GetFirstVisibleElement(t);return n?(n.blur(),n.dispatchEvent(i),n.focus(),n.setAttribute("value",a),n.value=a,n.dispatchEvent(o),n.dispatchEvent(l),n.dispatchEvent(i),n.blur(),!0):(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: input box undefined"),!1)}}function a(e){window.WalletCheckoutScriptAutofillRuntime.postMessageToHost("AutofillComplete",e)}async function i(a){const{Selector:i,Type:l,ValueList:o,WaitBefore:n}=a;await e.Sleep(n||0);const s=await e.IsFieldVisible(i);if(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: isSelectorVisible",s),!s)throw new Error("Selector not found");"input"===l?t.SetBoxValue(i,o?.[0]):"button"===l&&t.Click(i)}async function l(a){const{ValueList:i,SecondarySelector:l,SecondaryType:o,WaitForVisible:n}=a;if(l){const a=await e.WaitForCondition((async()=>await e.IsFieldVisible(l)),n||0);if(window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: isSecondarySelectorVisible",a),!a)throw new Error("Secondary selector not found");if("option"===o){const a=e.RunQuerySelectorAll(l);for(const e of a){const a=(e?.innerText||e?.innerHTML)?.toUpperCase()?.trim();i?.map((e=>e.toUpperCase()))?.includes(a)&&t.Click(void 0,e)}}else"button"===o&&t.Click(l)}}window.WalletCheckoutScriptAutofillRuntime=new class{initialize(){return window.loadTimeData={data_:{isDebugEnabled:!0}},window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: Wallet Checkout Script Autofill Initialize"),!0}raiseMessageFromHost(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: raiseMessageFromHost",e);if("WalletCheckoutScriptAutofill"===e.shift())try{"interactive"===document.readyState||"complete"===document.readyState?window.ExecuteAutofill(e):window.addEventListener?.("DOMContentLoaded",(()=>{window.ExecuteAutofill(e)}))}catch(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: raiseMessageFromHost error",e)}}postMessageToHost(e,t){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: postMessageToHost",e,t);try{walletCheckoutAutofillNativeHandler&&walletCheckoutAutofillNativeHandler.sendMessageToHost(e,t)}catch(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: postMessageToHost error",e)}}},window.ExecuteAutofill=async function(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: ExecuteAutofill",e);try{const t=e?.[0],o=e?.[1],n=JSON.parse(t??"{}"),s=JSON.parse(o??"{}"),{CheckoutElements:c=[]}=n,{IsDebugEnabled:d}=s;window.loadTimeData={data_:{isDebugEnabled:d}};let u=!0;const r=[];for(const e of c){const{Name:t}=e;try{await i(e)}catch(e){u=!1,r.push({failedField:t,failedReason:e.message});continue}try{await l(e)}catch(e){u=!1,r.push({failedField:t,failedReason:e.message})}}a([JSON.stringify({isSuccess:u,failureDetails:r?.length>0?r:null})])}catch(e){window.loadTimeData.data_.isDebugEnabled&&console.log("XPay wallet debugging: ExecuteAutofill error",e),a([JSON.stringify({isSuccess:!1,failureDetails:null})])}}}();